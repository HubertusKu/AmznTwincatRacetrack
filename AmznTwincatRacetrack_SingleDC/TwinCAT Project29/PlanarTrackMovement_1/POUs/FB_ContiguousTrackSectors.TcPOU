<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ContiguousTrackSectors" Id="{cea668e4-bd5b-031f-3b1e-5ca5fef41ef1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ContiguousTrackSectors
VAR
//	InitDone								: BOOL;
	SectorIndex								: UDINT;

//Configurations
	astSectorConfig							: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_TrackSectorConfig;
    stMultiSectorShortcutEntryConfig        : ST_TrackSectorConfig;
    stMultiSectorEntryAndShortcutConfig     : ST_TrackSectorConfig;

	afbSector								: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF FB_SingularTrackSector;
    fbMultiSectorShortcutEntry              : FB_SingularTrackSector;
    fbMultiSectorCompleteShortcut           : FB_SingularTrackSector;
END_VAR
VAR_IN_OUT
	MoverIndex								: UDINT;
END_VAR
VAR CONSTANT
	SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN	: LREAL := 12000;
	SHORTCUT_SHUTTLE_END_POSN				: LREAL := 16600;
END_VAR
VAR_OUTPUT
	SingularSectorStatuses					: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_TrackSectorStatus;
    ShortcutEntrySectorStatus               : ST_TrackSectorStatus;
    CompleteShortcutSectorStatus            : ST_TrackSectorStatus;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//IF NOT InitDone THEN
	_M_Configurations();
//END_IF

FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
	//Planar Mover
	afbSector[SectorIndex].P_PlanarMover			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_PlanarMover;

	//XTS Mover Reference
	afbSector[SectorIndex].P_XtsPositionInfo		:= fbPlanarXtsMover[MoverIndex].P_XtsPositionInfo;
	
	//Sector Configuration
	afbSector[SectorIndex].P_TrackSectorConfig	:= astSectorConfig[SectorIndex];

	//FB calls
	afbSector[SectorIndex](refPlanarTracks := GVL_General.stPlanarTrackConfig);
END_FOR

//Multi Sector
//Planar Mover
fbMultiSectorShortcutEntry.P_PlanarMover			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_PlanarMover;
fbMultiSectorCompleteShortcut.P_PlanarMover			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_PlanarMover;

//XTS Mover Reference
fbMultiSectorShortcutEntry.P_XtsPositionInfo		:= fbPlanarXtsMover[MoverIndex].P_XtsPositionInfo;
fbMultiSectorCompleteShortcut.P_XtsPositionInfo		:= fbPlanarXtsMover[MoverIndex].P_XtsPositionInfo;

//Sector Configuration
fbMultiSectorShortcutEntry.P_TrackSectorConfig	    := stMultiSectorShortcutEntryConfig;
fbMultiSectorCompleteShortcut.P_TrackSectorConfig	:= stMultiSectorEntryAndShortcutConfig;

//FB calls
fbMultiSectorShortcutEntry(refPlanarTracks := GVL_General.stPlanarTrackConfig);
fbMultiSectorCompleteShortcut(refPlanarTracks := GVL_General.stPlanarTrackConfig);
]]></ST>
    </Implementation>
    <Method Name="_M_Configurations" Id="{d5984703-ddc9-0101-2304-91fe3fd1a544}">
      <Declaration><![CDATA[METHOD _M_Configurations]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (GVL_General.XtsOutterLoopOid <> 0) AND (GVL_General.XtsShortcutOid <> 0) THEN
	astSectorConfig[GC.MAGNETON_SECTOR].XtsObjId			            := GVL_General.XtsOutterLoopOid;
    
    IF GVL_General.stSwitchConfig.UseNominalCurrentVeloSetpoints THEN
        GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := GVL_General.stSwitchConfig.PosnCoilResponseTimeCoeffNominal;
    ELSE (* NOT GVL_General.stSwitchConfig.UseHMINominalSetpoints *)
        GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := PositionF_CurrentCoeff(Position := GVL_General.stSwitchConfig.MagnetStartPosition, Current := GVL_General.stSwitchStatus.CurrentOutputMax);
	END_IF
    astSectorConfig[GC.MAGNETON_SECTOR].SectorStartPosn		                        := GVL_General.stSwitchConfig.MagnetStartPosition*GVL_General.stSwitchStatus.PosnCurrentCoeff;
    astSectorConfig[GC.MAGNETON_SECTOR].SectorEndPosn			                    := GVL_General.stSwitchConfig.MagnetEndPosition*GVL_General.stSwitchStatus.PosnCurrentCoeff;
	
	astSectorConfig[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].XtsObjId		:= GVL_General.XtsOutterLoopOid;
	astSectorConfig[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].SectorStartPosn		        := GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()-GVL_General.stTrackShortcutConfig.MagnetTriggerWindowStart;
	astSectorConfig[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].SectorEndPosn		        := GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()-GVL_General.stTrackShortcutConfig.MagnetTriggerWindowEnd;
                                        	
	astSectorConfig[GC.DIVERT_STARTINNERLOOP_SECTOR].XtsObjId		:= GVL_General.XtsShortcutOid;
	astSectorConfig[GC.DIVERT_STARTINNERLOOP_SECTOR].SectorStartPosn		        := 0;
	astSectorConfig[GC.DIVERT_STARTINNERLOOP_SECTOR].SectorEndPosn			        := SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN;
                                          	
	astSectorConfig[GC.SHORTCUT_INTERNAL_SECTOR].XtsObjId			:= GVL_General.XtsShortcutOid;
	astSectorConfig[GC.SHORTCUT_INTERNAL_SECTOR].SectorStartPosn			        := SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN;
	astSectorConfig[GC.SHORTCUT_INTERNAL_SECTOR].SectorEndPosn				        := SHORTCUT_SHUTTLE_END_POSN;

	astSectorConfig[GC.SHORTCUT_MERGEWAIT_SECTOR].XtsObjId		    := GVL_General.XtsShortcutOid;
	astSectorConfig[GC.SHORTCUT_MERGEWAIT_SECTOR].SectorStartPosn	                := SHORTCUT_SHUTTLE_END_POSN - GC.SHUTTLE_DIM_PADDED;
	astSectorConfig[GC.SHORTCUT_MERGEWAIT_SECTOR].SectorEndPosn		                := SHORTCUT_SHUTTLE_END_POSN;

    //Multi Sector references configuration of other singular sectors
    stMultiSectorShortcutEntryConfig.XtsObjId                := GVL_General.XtsOutterLoopOid;
    stMultiSectorShortcutEntryConfig.SectorStartPosn                        := astSectorConfig[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].SectorStartPosn;
    stMultiSectorShortcutEntryConfig.SectorEndPosn                          := SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN;

    stMultiSectorEntryAndShortcutConfig.XtsObjId             := GVL_General.XtsOutterLoopOid;
    stMultiSectorEntryAndShortcutConfig.SectorStartPosn                     := astSectorConfig[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].SectorStartPosn;
    stMultiSectorEntryAndShortcutConfig.SectorEndPosn                       := astSectorConfig[GC.SHORTCUT_MERGEWAIT_SECTOR].SectorEndPosn;

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateMultiSectors" Id="{ae03c76e-6e16-04d8-1424-44e866fd999f}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateMultiSectors]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Multi Sectors

//Shortcut Entry
ShortcutEntrySectorStatus.MoverCountOnSector    := afbSector[GC.MAGNETON_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.DIVERT_STARTINNERLOOP_SECTOR].P_SectorStatus.MoverCountOnSector;
                                            
ShortcutEntrySectorStatus.MoverIsOnSector       := NOT (ShortcutEntrySectorStatus.MoverCountOnSector = 0);

//Complete Shortcut Entry to Merge
CompleteShortcutSectorStatus.MoverCountOnSector    := afbSector[GC.MAGNETON_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.DIVERT_STARTINNERLOOP_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.SHORTCUT_INTERNAL_SECTOR].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.SHORTCUT_MERGEWAIT_SECTOR].P_SectorStatus.MoverCountOnSector;
                                            
CompleteShortcutSectorStatus.MoverIsOnSector    := NOT (CompleteShortcutSectorStatus.MoverCountOnSector = 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateSingularSectors" Id="{84bf508d-6aa5-0db5-249e-627d20df0d52}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateSingularSectors
VAR
    SectorIndex : INT; // FOR loop
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Singular Sectors
FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
    IF afbSector[SectorIndex].P_SectorStatus.MoverEnteredSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector +1;
    ELSIF afbSector[SectorIndex].P_SectorStatus.MoverExitedSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector -1;
    END_IF
    
END_FOR


SingularSectorStatuses[GC.MAGNETON_SECTOR] 		                := afbSector[GC.MAGNETON_SECTOR].P_SectorStatus;
SingularSectorStatuses[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR] 	    := afbSector[GC.DIVERT_TRIG_ENDOUTERLOOP_SECTOR].P_SectorStatus;
SingularSectorStatuses[GC.DIVERT_STARTINNERLOOP_SECTOR] 		:= afbSector[GC.DIVERT_STARTINNERLOOP_SECTOR].P_SectorStatus;
SingularSectorStatuses[GC.SHORTCUT_INTERNAL_SECTOR] 			:= afbSector[GC.SHORTCUT_INTERNAL_SECTOR].P_SectorStatus;
SingularSectorStatuses[GC.SHORTCUT_MERGEWAIT_SECTOR] 	        := afbSector[GC.SHORTCUT_MERGEWAIT_SECTOR].P_SectorStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateStatus" Id="{7fe5605e-c7f4-08a0-2975-b47f8373ba34}">
      <Declaration><![CDATA[METHOD PROTECTED _M_UpdateStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[_M_UpdateSingularSectors();

_M_UpdateMultiSectors();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>