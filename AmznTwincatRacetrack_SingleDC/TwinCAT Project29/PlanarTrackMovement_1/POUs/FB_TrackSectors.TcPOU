<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TrackSectors" Id="{cea668e4-bd5b-031f-3b1e-5ca5fef41ef1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TrackSectors
VAR
//	InitDone								: BOOL;
	SectorIndex								: UDINT;

//Configurations
	astSectorConfig							: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorConfig;

	afbSector								: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF FB_SingularTrackSector;
END_VAR
VAR_IN_OUT
	MoverIndex								: UDINT;
END_VAR
VAR CONSTANT
	SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN	: LREAL := 1500; // Part Reference (not Track)
	SHORTCUT_SHUTTLE_MERGEWAIT_POSN				: LREAL := 6000; // Part Reference (not Track)
END_VAR
VAR_OUTPUT
		SingularSectorStatus					: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorStatus;
    ShortcutEntrySectorStatus               : ST_SectorStatus;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//IF NOT InitDone THEN
	_M_Configurations();
//END_IF

FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
	//Planar Mover
	afbSector[SectorIndex].P_PlanarMover			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_PlanarMover;

	//XTS Mover Reference
	afbSector[SectorIndex].P_XtsPositionInfo		:= fbPlanarXtsMover[MoverIndex].P_XtsPositionInfo;
	
	//Sector Configuration
	afbSector[SectorIndex].P_TrackSectorConfig	:= astSectorConfig[SectorIndex];

	//FB calls
	afbSector[SectorIndex](refPlanarTracks := GVL_General.stPlanarTrackConfig);
END_FOR

_M_UpdateStatus();]]></ST>
    </Implementation>
    <Method Name="_M_Configurations" Id="{d5984703-ddc9-0101-2304-91fe3fd1a544}">
      <Declaration><![CDATA[METHOD _M_Configurations]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (GVL_General.XtsCompleteTrackOuterOID <> 0) AND (GVL_General.XtsCompleteTrackInnerOID <> 0) THEN

IF GVL_General.stSwitchConfig.UseNominalCurrentVeloSetpoints THEN
	GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := GVL_General.stSwitchConfig.PosnCoilResponseTimeCoeffNominal;
ELSE (* NOT GVL_General.stSwitchConfig.UseHMINominalSetpoints *)
	GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := PositionF_CurrentCoeff(Position := GVL_General.stSwitchConfig.MagnetStartPosition, Current := GVL_General.stSwitchStatus.CurrentOutputMax);
END_IF

	astSectorConfig[GC.MAG_ON_SECTOR_OPART].ObjectId						    := GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn			    := GVL_General.stSwitchConfig.MagnetStartPosition*GVL_General.stSwitchStatus.PosnCurrentCoeff;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorEndPosn			 	    := GVL_General.stSwitchConfig.MagnetEndPosition*GVL_General.stSwitchStatus.PosnCurrentCoeff;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].TrackSectorStartPosn			    := 0;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].TrackSectorEndPosn 			 	:= 0;

	astSectorConfig[GC.MAG_ON_SECTOR_OPART_PAD].ObjectId						    := GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART_PAD].PartSectorStartPosn			    := astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn-GVL_General.stSwitchConfig.MagnetTriggerWindowEach;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART_PAD].PartSectorEndPosn			 	:= astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorEndPosn+GVL_General.stSwitchConfig.MagnetTriggerWindowEach;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART_PAD].TrackSectorStartPosn			    := 0;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART_PAD].TrackSectorEndPosn 			 	:= 0;

	astSectorConfig[GC.MAG_TRIG_SECTOR_OPART_END].ObjectId						:= GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.MAG_TRIG_SECTOR_OPART_END].PartSectorStartPosn			:= astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn-GVL_General.stTrackGlobalConfig.DistancePreMagnetAvoidDecel;
	astSectorConfig[GC.MAG_TRIG_SECTOR_OPART_END].PartSectorEndPosn			 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Main].GetLength();
	astSectorConfig[GC.MAG_TRIG_SECTOR_OPART_END].TrackSectorStartPosn			:= 0; 
	astSectorConfig[GC.MAG_TRIG_SECTOR_OPART_END].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].ObjectId					:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].PartSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].PartSectorEndPosn			:= SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].TrackSectorStartPosn		:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.SHORTCUT_MAIN_SECTOR_IPART].ObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_MAIN_SECTOR_IPART].PartSectorStartPosn			:= SHORTCUT_SHUTTLE_FULLY_INGRESSED_POSN;
	astSectorConfig[GC.SHORTCUT_MAIN_SECTOR_IPART].PartSectorEndPosn			:= SHORTCUT_SHUTTLE_MERGEWAIT_POSN - GC.SHUTTLE_LENGTH_PADDED;
	astSectorConfig[GC.SHORTCUT_MAIN_SECTOR_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_MAIN_SECTOR_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.SHORTCUT_EXIT_SECTOR_IPART].ObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_EXIT_SECTOR_IPART].PartSectorStartPosn			:= SHORTCUT_SHUTTLE_MERGEWAIT_POSN - GC.SHUTTLE_LENGTH_PADDED;
	astSectorConfig[GC.SHORTCUT_EXIT_SECTOR_IPART].PartSectorEndPosn			:= SHORTCUT_SHUTTLE_MERGEWAIT_POSN;
	astSectorConfig[GC.SHORTCUT_EXIT_SECTOR_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_EXIT_SECTOR_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.MERGE_SECTOR_TO_FINISH].ObjectId						    := GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.MERGE_SECTOR_TO_FINISH].PartSectorStartPosn			    := SHORTCUT_SHUTTLE_MERGEWAIT_POSN;
	astSectorConfig[GC.MERGE_SECTOR_TO_FINISH].PartSectorEndPosn			 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.MERGE_SECTOR_TO_FINISH].TrackSectorStartPosn			   	:= 0;
	astSectorConfig[GC.MERGE_SECTOR_TO_FINISH].TrackSectorEndPosn 			 	:= 0;

	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].ObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].PartSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].PartSectorEndPosn			 	:= (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() / 2);
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].ObjectId						    := GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].PartSectorStartPosn			    := (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() - GC.SHUTTLE_LENGTH) / 2;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].PartSectorEndPosn			 	:= (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() + GC.SHUTTLE_LENGTH) / 2;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].TrackSectorStartPosn			    := 0;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].TrackSectorEndPosn 			 	:= 0;

	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].ObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].PartSectorStartPosn			:= (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() / 2);
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].PartSectorEndPosn			 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.NO_DIVERT_POST_MAG].ObjectId						        := GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.NO_DIVERT_POST_MAG].PartSectorStartPosn			        := 0;
	astSectorConfig[GC.NO_DIVERT_POST_MAG].PartSectorEndPosn			 	    := GC.SHUTTLE_LENGTH_PADDED;
	astSectorConfig[GC.NO_DIVERT_POST_MAG].TrackSectorStartPosn			        := 0;
	astSectorConfig[GC.NO_DIVERT_POST_MAG].TrackSectorEndPosn 			 	    := 0;

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateMultiSectors" Id="{ae03c76e-6e16-04d8-1424-44e866fd999f}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateMultiSectors]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Multi Sectors

//Shortcut Entry
ShortcutEntrySectorStatus.MoverCountOnSector    := afbSector[GC.MAG_TRIG_SECTOR_OPART_END].P_SectorStatus.MoverCountOnSector + 
                                                        afbSector[GC.SHORTCUT_ENTRY_HALF_IPART].P_SectorStatus.MoverCountOnSector;
                                            
ShortcutEntrySectorStatus.MoverIsOnSector       := NOT (ShortcutEntrySectorStatus.MoverCountOnSector = 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateSingularSectors" Id="{84bf508d-6aa5-0db5-249e-627d20df0d52}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateSingularSectors
VAR
    SectorIndex : INT; // FOR loop
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Singular Sectors
FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
    IF afbSector[SectorIndex].P_SectorStatus.MoverEnteredSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector +1;
    ELSIF afbSector[SectorIndex].P_SectorStatus.MoverExitedSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector -1;
    END_IF
END_FOR


SingularSectorStatus[GC.MAG_ON_SECTOR_OPART] 		        := afbSector[GC.MAG_ON_SECTOR_OPART].P_SectorStatus;
SingularSectorStatus[GC.MAG_ON_SECTOR_OPART_PAD] 		    := afbSector[GC.MAG_ON_SECTOR_OPART_PAD].P_SectorStatus;
SingularSectorStatus[GC.MAG_TRIG_SECTOR_OPART_END] 	  		:= afbSector[GC.MAG_TRIG_SECTOR_OPART_END].P_SectorStatus;
SingularSectorStatus[GC.SHORTCUT_ENTRY_SECTOR_IPART] 		:= afbSector[GC.SHORTCUT_ENTRY_SECTOR_IPART].P_SectorStatus;
SingularSectorStatus[GC.SHORTCUT_MAIN_SECTOR_IPART] 		:= afbSector[GC.SHORTCUT_MAIN_SECTOR_IPART].P_SectorStatus;
SingularSectorStatus[GC.SHORTCUT_EXIT_SECTOR_IPART] 	    := afbSector[GC.SHORTCUT_EXIT_SECTOR_IPART].P_SectorStatus;
SingularSectorStatus[GC.MERGE_SECTOR_TO_FINISH] 	        := afbSector[GC.MERGE_SECTOR_TO_FINISH].P_SectorStatus;
SingularSectorStatus[GC.SHORTCUT_ENTRY_HALF_IPART] 	        := afbSector[GC.SHORTCUT_ENTRY_HALF_IPART].P_SectorStatus;
SingularSectorStatus[GC.LOAD_STOP_SECTOR_IPART] 	        := afbSector[GC.LOAD_STOP_SECTOR_IPART].P_SectorStatus;
SingularSectorStatus[GC.SHORTCUT_EXIT_HALF_IPART] 	        := afbSector[GC.SHORTCUT_EXIT_HALF_IPART].P_SectorStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateStatus" Id="{7fe5605e-c7f4-08a0-2975-b47f8373ba34}">
      <Declaration><![CDATA[METHOD PROTECTED _M_UpdateStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[_M_UpdateSingularSectors();

_M_UpdateMultiSectors();]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_SectorConfig" Id="{ce3410f7-df14-06f9-06cc-e42f221e6feb}">
      <Declaration><![CDATA[PROPERTY P_SectorConfig : REFERENCE TO ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorConfig]]></Declaration>
      <Get Name="Get" Id="{4a773fc5-ad21-0a64-2497-a5caee266368}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_SectorConfig REF= astSectorConfig;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>