<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TrackSector" Id="{454c8ee6-eb93-03bb-3d09-d82885cc2db0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TrackSector
VAR_INPUT
	PlanarTrackIndex				: E_TrackNum := E_TrackNum.Small;
END_VAR
VAR_IN_OUT
	refPlanarTracks					: ARRAY[*] OF ST_PlanarTrackConfig; //NOTE ref array is 0-based!
END_VAR                     		
VAR                             	
	InitDone						: BOOL;
	stSectorConfig					: ST_SectorConfig;
	LowerBoundPlanarTrackConfig		: DINT;
	UpperBoundPlanarTrackConfig		: DINT;
	refXtsMover						: Tc3_XTS_Utility.ST_PositionInfo;
	refPlanarMover					: MoverSort;
	stSectorStatus				: ST_StaticSectorStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF UpperBoundPlanarTrackConfig = 0 THEN
	_M_Init();
ELSE
	InitDone	:= TRUE;
END_IF

IF InitDone THEN
	_M_UpdateSectorStatus();
END_IF]]></ST>
    </Implementation>
    <Method Name="_M_EnteredSectorBoundary" Id="{0a3cca6a-e759-04fb-3dcc-374b74b3c321}">
      <Declaration><![CDATA[METHOD PROTECTED _M_EnteredSectorBoundary : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//By XTS Loop
_M_EnteredSectorBoundary	:= ((refXtsMover.nTrackObjectid = stSectorConfig.TrackObjectId) OR
											(refXtsMover.nPartObjectid = stSectorConfig.PartObjectIdEnt)) AND
											(refXtsMover.fPartPosition >= stSectorConfig.PartSectorStartPosn);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_ExitedSectorBoundary" Id="{00d57a64-9874-094d-2cfc-d616680a63c5}">
      <Declaration><![CDATA[METHOD PROTECTED _M_ExitedSectorBoundary : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//By XTS Loop
_M_ExitedSectorBoundary	:= ((refXtsMover.nTrackObjectid = stSectorConfig.TrackObjectId) OR
											(refXtsMover.nPartObjectid = stSectorConfig.PartObjectIdExit)) AND 		
											(refXtsMover.fPartPosition > stSectorConfig.PartSectorEndPosn);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_Init" Id="{ef455004-cd91-0816-3ac9-eb75e5eaacf7}">
      <Declaration><![CDATA[METHOD PRIVATE _M_Init]]></Declaration>
      <Implementation>
        <ST><![CDATA[LowerBoundPlanarTrackConfig	:= LOWER_BOUND(refPlanarTracks,1);
UpperBoundPlanarTrackConfig	:= UPPER_BOUND(refPlanarTracks,1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_IsOnBoundarySector" Id="{a6a9cbf9-5449-04f4-0712-3189be51ddb5}">
      <Declaration><![CDATA[METHOD PROTECTED _M_IsOnBoundarySector
VAR_INST
	MoverEnteredOneShot 	: BOOL;
	MoverExitedOneShot	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//By XTS Loop
IF NOT MoverEnteredOneShot AND _M_EnteredSectorBoundary() THEN
	stSectorStatus.MoverIsOnSector	:= TRUE;
	MoverEnteredOneShot	:= TRUE;
END_IF

IF MoverEnteredOneShot THEN
	IF NOT MoverExitedOneShot AND _M_ExitedSectorBoundary() THEN
		stSectorStatus.MoverIsOnSector	:= FALSE;
		MoverExitedOneShot := TRUE;
	END_IF
END_IF

IF stSectorStatus.MoverExitedSector.Q THEN
	MoverEnteredOneShot 	:= FALSE;
	MoverExitedOneShot		:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_IsOnPlanarSector" Id="{801ce463-9c2b-0c61-1ed8-bdb6b24d5f35}">
      <Declaration><![CDATA[METHOD PROTECTED _M_IsOnPlanarSector : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//note refPlanarTracks ARRAY is 0-based!
IF ADR(refPlanarTracks[(PlanarTrackIndex-1)]) <> 0 THEN
	_M_IsOnPlanarSector	:= (refPlanarMover.TrackID = refPlanarTracks[(PlanarTrackIndex-1)].MCTrack.TrackOID) 
							AND IsBetween(value := refPlanarMover.MoverPos, 
												minV := stSectorConfig.TrackSectorStartPosn, 
												maxV := stSectorConfig.TrackSectorEndPosn);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_IsOnXtsSector" Id="{6fb38ca4-6b76-0afd-297f-a5f43cfa3834}">
      <Declaration><![CDATA[METHOD PROTECTED _M_IsOnXtsSector : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[//By XTS Loop
_M_IsOnXtsSector	:= ((refXtsMover.nTrackObjectid = stSectorConfig.TrackObjectId) OR
										(refXtsMover.nPartObjectid = stSectorConfig.PartObjectId)) AND
										(IsBetween(value := refXtsMover.fPartPosition, 
										minV := stSectorConfig.PartSectorStartPosn, 
										maxV := stSectorConfig.PartSectorEndPosn) OR
										IsBetween(value := refXtsMover.fTrackPosition, 
										minV := stSectorConfig.TrackSectorStartPosn, 
										maxV := stSectorConfig.TrackSectorEndPosn));]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateSectorStatus" Id="{3dbda7bd-d78d-0797-197a-6bd81167f773}">
      <Declaration><![CDATA[METHOD PROTECTED _M_UpdateSectorStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stSectorConfig.SectorSpansBoundary THEN
	_M_IsOnBoundarySector();
ELSE // by parts
	stSectorStatus.MoverIsOnSector	:= _M_IsOnXtsSector() OR _M_IsOnPlanarSector();
END_IF

stSectorStatus.MoverEnteredSector(CLK := stSectorStatus.MoverIsOnSector);
stSectorStatus.MoverExitedSector(CLK := stSectorStatus.MoverIsOnSector);

stSectorStatus.SectorLength := stSectorConfig.PartSectorEndPosn - stSectorConfig.PartSectorStartPosn;

IF stSectorStatus.MoverIsOnSector THEN
	stSectorStatus.MoverDistanceFromEnd := stSectorConfig.PartSectorEndPosn - refXtsMover.fPartPosition;
ELSE
	stSectorStatus.MoverDistanceFromEnd	:= 0;
END_IF

IF stSectorStatus.MoverIsOnSector THEN
	IF stSectorStatus.SectorLength <> 0 THEN
		stSectorStatus.PercentOfSectorTraversed	:= (refXtsMover.fPartPosition - stSectorConfig.PartSectorStartPosn) / stSectorStatus.SectorLength;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_MoverSort" Id="{c0ac9430-b382-04fd-3b6a-1962bd5a1c7e}">
      <Declaration><![CDATA[PROPERTY P_MoverSort : REFERENCE TO MoverSort]]></Declaration>
      <Get Name="Get" Id="{804e0c8f-06ff-09a3-09d5-b11c0f048c58}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_MoverSort	REF= refPlanarMover;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_SectorStatus" Id="{5f8e870d-e32a-0163-2da9-1a6a40e1a497}">
      <Declaration><![CDATA[PROPERTY P_SectorStatus : REFERENCE TO ST_StaticSectorStatus]]></Declaration>
      <Get Name="Get" Id="{de3ffc99-936a-0b5d-0ea1-4e9664bc445a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_SectorStatus	REF= stSectorStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_TrackSectorConfig" Id="{5b7ff01c-1c59-02c5-1dcb-4c860620dc5f}">
      <Declaration><![CDATA[PROPERTY P_TrackSectorConfig : REFERENCE TO ST_SectorConfig]]></Declaration>
      <Get Name="Get" Id="{6f251efa-6799-0ba7-38f2-aa9f1e2ed41e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_TrackSectorConfig REF= stSectorConfig;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_XtsPositionInfo" Id="{d96f07f7-f866-0c16-0900-c47c81882126}">
      <Declaration><![CDATA[PROPERTY P_XtsPositionInfo : REFERENCE TO Tc3_XTS_Utility.ST_PositionInfo]]></Declaration>
      <Get Name="Get" Id="{ae45bb6f-f61b-08ea-11d8-d62f8182115f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_XtsPositionInfo REF= refXtsMover;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>