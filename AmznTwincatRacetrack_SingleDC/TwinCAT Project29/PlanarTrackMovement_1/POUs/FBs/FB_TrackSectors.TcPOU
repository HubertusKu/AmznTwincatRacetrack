<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TrackSectors" Id="{cea668e4-bd5b-031f-3b1e-5ca5fef41ef1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TrackSectors
VAR_INPUT
	XtsDataRef								: REFERENCE TO Tc3_XTS_Utility.ST_PositionInfo;
END_VAR
VAR
//	InitDone								: BOOL;
	SectorIndex								: UDINT;

//Configurations
	astSectorConfig							: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorConfig;

	afbSector								: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF FB_TrackSector;
END_VAR
VAR_IN_OUT
	MoverIndex								: UDINT;
END_VAR
VAR_OUTPUT
	SectorStatus					: ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_StaticSectorStatus;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//IF NOT InitDone THEN
	_M_Configurations();
//END_IF

_M_UpdateStatus();

FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
	//Planar Mover
	afbSector[SectorIndex].P_MoverSort			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_MoverSort;

	//XTS Mover Reference
	afbSector[SectorIndex].P_XtsPositionInfo		:= XtsDataRef;
	
	//Sector Configuration
	afbSector[SectorIndex].P_TrackSectorConfig	:= astSectorConfig[SectorIndex];

	//FB calls
	afbSector[SectorIndex](refPlanarTracks := GVL_General.stPlanarTrackConfig);
END_FOR
]]></ST>
    </Implementation>
    <Method Name="_M_Configurations" Id="{d5984703-ddc9-0101-2304-91fe3fd1a544}">
      <Declaration><![CDATA[METHOD _M_Configurations]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (GVL_General.XtsCompleteTrackOuterOID <> 0) AND (GVL_General.XtsCompleteTrackInnerOID <> 0) THEN

{warning <'Make this a function of velocity; it's not that sensitive to current'>}
//IF GVL_General.stSwitchConfig.UseNominalPositionCoeff THEN
//	GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := GVL_General.stSwitchConfig.PosnCoilResponseTimeCoeffNominal;
//ELSE (* NOT GVL_General.stSwitchConfig.UseHMINominalSetpoints *)
//	GVL_General.stSwitchStatus.PosnCurrentCoeff                                 := PositionF_CurrentCoeff(Current := GVL_General.stSwitchStatus.CurrentOutputMax);
//END_IF

	astSectorConfig[GC.DIVERTQ_SECTOR_OPART].PartObjectId						:= GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.DIVERTQ_SECTOR_OPART].PartSectorStartPosn			:= F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn)-GC.SHUTTLE_LENGTH;
	astSectorConfig[GC.DIVERTQ_SECTOR_OPART].PartSectorEndPosn			 	:= astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn;
	astSectorConfig[GC.DIVERTQ_SECTOR_OPART].TrackSectorStartPosn			:= 0; 
	astSectorConfig[GC.DIVERTQ_SECTOR_OPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartObjectId						:= GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorStartPosn			:= GVL_General.stSwitchConfig.MagnetOnStartPosition;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].PartSectorEndPosn			 	:= GVL_General.stSwitchConfig.MagnetOnEndPosition;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].TrackSectorStartPosn			:= GVL_General.stSwitchConfig.MagnetOnStartPosition;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].TrackSectorEndPosn 			:= GVL_General.stSwitchConfig.MagnetOnEndPosition;
	astSectorConfig[GC.MAG_ON_SECTOR_OPART].SectorSpansBoundary			:= FALSE; 	
	
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].PartObjectId					:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].PartSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].PartSectorEndPosn			:= stTrackGlobalConfig.ShortcutShuttleFullyInPosn;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].TrackSectorStartPosn		:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_SECTOR_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].PartObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].PartSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].PartSectorEndPosn			 	:= (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() / 2);
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_ENTRY_HALF_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.SHORTCUT_CALC_SECTOR_IPART].PartObjectId						:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_CALC_SECTOR_IPART].PartSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_CALC_SECTOR_IPART].PartSectorEndPosn			:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.MergeWaitFinishDistance + (stMoverConfig.NormalMoverGap /2);
	astSectorConfig[GC.SHORTCUT_CALC_SECTOR_IPART].TrackSectorStartPosn			:= 0;
	astSectorConfig[GC.SHORTCUT_CALC_SECTOR_IPART].TrackSectorEndPosn 			:= 0;

	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].PartObjectId						    := GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].PartSectorStartPosn			    := F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() /2) -GC.SHUTTLE_LENGTH);
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].PartSectorEndPosn			 	:= GC.SHUTTLE_LENGTH + (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() /2) ;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].TrackSectorStartPosn			    := 0;
	astSectorConfig[GC.LOAD_STOP_SECTOR_IPART].TrackSectorEndPosn 			 	:= 0;

	astSectorConfig[GC.SHORTCUT_COMPLETE].PartObjectId													:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_COMPLETE].PartSectorStartPosn								:= 0;
	astSectorConfig[GC.SHORTCUT_COMPLETE].PartSectorEndPosn								:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.SHORTCUT_COMPLETE].TrackSectorStartPosn						:= 0;
	astSectorConfig[GC.SHORTCUT_COMPLETE].TrackSectorEndPosn 							:= 0;
	
	astSectorConfig[GC.SHORTCUT_HD_SECTION].PartObjectId										:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_HD_SECTION].PartSectorStartPosn							:= stTrackGlobalConfig.ShortcutHDRegionDistance;
	astSectorConfig[GC.SHORTCUT_HD_SECTION].PartSectorEndPosn								:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.ShortcutHDRegionDistance;
	astSectorConfig[GC.SHORTCUT_HD_SECTION].TrackSectorStartPosn						:= 0;
	astSectorConfig[GC.SHORTCUT_HD_SECTION].TrackSectorEndPosn 							:= 0;
	
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].PartObjectId										:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].PartSectorStartPosn				:= (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() / 2);
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].PartSectorEndPosn			 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].TrackSectorStartPosn				:= 0;
	astSectorConfig[GC.SHORTCUT_EXIT_HALF_IPART].TrackSectorEndPosn 				:= 0;

	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartObjectId								:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorStartPosn					:= F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.MergeWaitFinishDistance-stTrackGlobalConfig.MergeWaitAccelDistance));
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorEndPosn						:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.MergeWaitFinishDistance + (GC.SHUTTLE_LENGTH /2);
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].TrackSectorStartPosn					:= 0;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].TrackSectorEndPosn 					:= 0;
	
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_FLYING].PartObjectId								:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_FLYING].PartSectorStartPosn					:= astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorStartPosn - GC.SHUTTLE_LENGTH;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_FLYING].PartSectorEndPosn						:= astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorStartPosn;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_FLYING].TrackSectorStartPosn				:= 0;
	astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_FLYING].TrackSectorEndPosn 					:= 0;

	//for calculation of length in the "3rd condition"
	astSectorConfig[GC.SHORTCUT_MERGE_CALC_EXACT].PartObjectId										:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.SHORTCUT_MERGE_CALC_EXACT].PartSectorStartPosn					:= F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.MergeWaitFinishDistance));
	astSectorConfig[GC.SHORTCUT_MERGE_CALC_EXACT].PartSectorEndPosn						:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-stTrackGlobalConfig.MergeWaitFinishDistance;
	astSectorConfig[GC.SHORTCUT_MERGE_CALC_EXACT].TrackSectorStartPosn					:= 0;
	astSectorConfig[GC.SHORTCUT_MERGE_CALC_EXACT].TrackSectorEndPosn 					:= 0;
	
	astSectorConfig[GC.INNER_MERGE_TO_FINISH].PartObjectId						   				 := GVL_General.XtsPartInnerFinish;
	astSectorConfig[GC.INNER_MERGE_TO_FINISH].PartSectorStartPosn					    := F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength());
	astSectorConfig[GC.INNER_MERGE_TO_FINISH].PartSectorEndPosn			 				:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.INNER_MERGE_TO_FINISH].TrackSectorStartPosn					   	:= 0;
	astSectorConfig[GC.INNER_MERGE_TO_FINISH].TrackSectorEndPosn 					 	:= 0;
                                                                            
	astSectorConfig[GC.OUTER_MERGE_COLLISION].PartObjectId						 	 					:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_MERGE_COLLISION].PartSectorStartPosn			 	 				:= F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := (GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - stTrackGlobalConfig.MergeCollisionRegionDeltaFromL));
	astSectorConfig[GC.OUTER_MERGE_COLLISION].PartSectorEndPosn			 	 	 				:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - stTrackGlobalConfig.MergeCollisionAdvance;
	astSectorConfig[GC.OUTER_MERGE_COLLISION].TrackSectorStartPosn			 				:= 0;
	astSectorConfig[GC.OUTER_MERGE_COLLISION].TrackSectorEndPosn 			 					:= 0;
	astSectorConfig[GC.OUTER_MERGE_COLLISION].SectorSpansBoundary 			 				:= FALSE;
	
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].PartObjectId						 	 		:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].PartSectorStartPosn			 	 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorStartPosn - stTrackGlobalConfig.ExpMoverLength;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].PartSectorEndPosn			 	 	 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - astSectorConfig[GC.SHORTCUT_MERGE_COMMAND_WAIT].PartSectorStartPosn;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].TrackSectorStartPosn			 	:= 0;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].TrackSectorEndPosn 			 			:= 0;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONFLY].SectorSpansBoundary 			 	:= FALSE;
	
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].PartObjectId						 	 		:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].PartSectorStartPosn			 	 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() - stTrackGlobalConfig.MergeWaitFinishDistance - stTrackGlobalConfig.ExpMoverLength;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].PartSectorEndPosn			 	 	 	:= GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength() - stTrackGlobalConfig.MergeWaitFinishDistance; (*-stTrackGlobalConfig.MergeWaitAccelDistance*)
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].TrackSectorStartPosn			 	:= 0;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].TrackSectorEndPosn 			 			:= 0;
	astSectorConfig[GC.OUTER_SHORTCUT_PROJECTIONSTAT].SectorSpansBoundary 			 	:= FALSE;
	
//Multi
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartObjectIdEnt						 	:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartObjectIdExit						 	:= GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorStartPosn			 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - stMoverConfig.NormalMoverGap; // take the distance from the small track 
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorEndPosn			 	 	 		:= stMoverConfig.NormalMoverGap;
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].TrackSectorStartPosn			 		:= 0;//GVL_Mc3.MC_Tracks[E_TrackNum.Main].GetLength() + astSectorConfig[GC.OUTER_MERGE_FINISH].PartSectorStartPosn;
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].TrackSectorEndPosn 			 			:= 0;//astSectorConfig[GC.OUTER_MERGE_START].PartSectorEndPosn;
	astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].SectorSpansBoundary					:= TRUE;
	
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].PartObjectId						 	 			:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].PartSectorStartPosn			 	 		:= astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorStartPosn - stMoverConfig.NormalMoverGap;
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].PartSectorEndPosn			 	 	 		:= astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorStartPosn;
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].TrackSectorStartPosn			 			:= 0;
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].TrackSectorEndPosn 			 				:= 0;
	astSectorConfig[GC.OUTER_PRE_TG_ZONE].SectorSpansBoundary					:= FALSE;
	
	astSectorConfig[GC.OUTER_POST_TG_ZONE].PartObjectId						 	 			:= GVL_General.XtsPartOuterStart;
	astSectorConfig[GC.OUTER_POST_TG_ZONE].PartSectorStartPosn			 	 		:= astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorEndPosn;
	astSectorConfig[GC.OUTER_POST_TG_ZONE].PartSectorEndPosn			 	 	 		:= astSectorConfig[GC.OUTER_TIGHTGAP_ZONE].PartSectorEndPosn + stMoverConfig.NormalMoverGap;
	astSectorConfig[GC.OUTER_POST_TG_ZONE].TrackSectorStartPosn			 			:= 0;
	astSectorConfig[GC.OUTER_POST_TG_ZONE].TrackSectorEndPosn 			 				:= 0;
	astSectorConfig[GC.OUTER_POST_TG_ZONE].SectorSpansBoundary					:= FALSE;

	astSectorConfig[GC.OUTER_BIGTRACK_END].PartObjectId						 	 					:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_BIGTRACK_END].PartSectorStartPosn			 	 		:= F_PosnInitial(VeloInit := GVL_General.stMoverConfig.NormalVelo, VeloFinal := 0, Accel := GVL_General.stMoverConfig.NormalDecel, PosnFinal := GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()) - GC.SHUTTLE_LENGTH;
	astSectorConfig[GC.OUTER_BIGTRACK_END].PartSectorEndPosn			 	 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength();
	astSectorConfig[GC.OUTER_BIGTRACK_END].TrackSectorStartPosn			 			:= 0;
	astSectorConfig[GC.OUTER_BIGTRACK_END].TrackSectorEndPosn 			 				:= 0;
	astSectorConfig[GC.OUTER_BIGTRACK_END].SectorSpansBoundary					:= FALSE;
	
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].PartObjectId						 	 			:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].PartSectorStartPosn			 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].PartSectorEndPosn			 	 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength();
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].TrackSectorStartPosn			 			:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength();
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].TrackSectorEndPosn 			 				:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength();                                                
	astSectorConfig[GC.OUTER_BIGTRACK_LSMALL].SectorSpansBoundary					:= FALSE;

	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].PartObjectId						 	 		:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].PartSectorStartPosn			 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength() - stTrackGlobalConfig.TargetPosnBeforeTrackEnd;
	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].PartSectorEndPosn			 	 	 		:= GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength();
	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].TrackSectorStartPosn			 			:= 0;
	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].TrackSectorEndPosn 			 				:= 0;
	astSectorConfig[GC.OUTER_BIGTRACK_MOVE_END].SectorSpansBoundary					:= FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateMultiSectors" Id="{ae03c76e-6e16-04d8-1424-44e866fd999f}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateMultiSectors]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Multi Sectors

//MergeCombinedSectorStat.MoverCountOnSector			:= afbSector[GC.OUTER_MERGE_START].P_SectorStatus.MoverCountOnSector + 
//                                                  afbSector[GC.OUTER_MERGE_FINISH].P_SectorStatus.MoverCountOnSector;
																									
//MergeCombinedSectorStat.MoverIsOnSector				:= NOT (MergeCombinedSectorStat.MoverCountOnSector = 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateStatus" Id="{7fe5605e-c7f4-08a0-2975-b47f8373ba34}">
      <Declaration><![CDATA[METHOD PROTECTED _M_UpdateStatus
VAR
    SectorIndex : INT; // FOR loop
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Singular Sectors
FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
    IF afbSector[SectorIndex].P_SectorStatus.MoverEnteredSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector +1;
    ELSIF afbSector[SectorIndex].P_SectorStatus.MoverExitedSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector -1;
    END_IF
		
		SectorStatus[SectorIndex]										:=  afbSector[SectorIndex].P_SectorStatus;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_SectorConfig" Id="{ce3410f7-df14-06f9-06cc-e42f221e6feb}">
      <Declaration><![CDATA[PROPERTY P_SectorConfig : REFERENCE TO ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorConfig]]></Declaration>
      <Get Name="Get" Id="{4a773fc5-ad21-0a64-2497-a5caee266368}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_SectorConfig REF= astSectorConfig;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>