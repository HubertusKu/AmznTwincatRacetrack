<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_DynSectors" Id="{4c8ed439-5fd2-03d2-26d2-dc869056cec9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DynSectors
VAR
//	InitDone								: BOOL;
	SectorIndex								: UDINT;

//Configurations
	astSectorConfig							: ARRAY[GC.nNumMinMovers..GVL_General.nNumMovers] OF ST_DynSectorConfig;

	afbSector								: ARRAY[GC.nNumMinMovers..GVL_General.nNumMovers] OF FB_DynamicSector;
END_VAR
VAR_IN_OUT
	MoverIndex								: UDINT;
END_VAR
VAR_OUTPUT
	SectorStatus					: ARRAY[GC.nNumMinMovers..GVL_General.nNumMovers] OF ST_DynSectorStatus;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR SectorIndex := GC.nNumMinMovers TO GVL_General.nNumMovers DO
	//Planar Mover
	afbSector[SectorIndex].P_PlanarMover			:= GVL_Mc3.fbPlanarXtsMover[MoverIndex].P_PlanarMover;

	//XTS Mover Reference
	afbSector[SectorIndex].P_XtsPositionInfo		:= fbPlanarXtsMover[MoverIndex].P_XtsPositionInfo;
	
	//Sector Configuration
	afbSector[SectorIndex].P_TrackSectorConfig	:= astSectorConfig[SectorIndex];

	//FB calls
	afbSector[SectorIndex](refPlanarTracks := GVL_General.stPlanarTrackConfig);
	
	_M_Configurations(Index := SectorIndex);
END_FOR

_M_UpdateStatus();]]></ST>
    </Implementation>
    <Method Name="_M_Configurations" Id="{86d1c976-b022-065b-37ee-858963ca4bdb}">
      <Declaration><![CDATA[METHOD _M_Configurations
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (GVL_General.XtsCompleteTrackOuterOID <> 0) AND (GVL_General.XtsCompleteTrackInnerOID <> 0) THEN


	astSectorConfig[Index].stStatConfig.PartObjectId						:= GVL_General.XtsPartOuterStart;

	astSectorConfig[Index].ComparePartObjectId[GC.OuterFinishPart]		:= GVL_General.XtsPartOuterFinish;
	astSectorConfig[Index].ComparePartObjectId[GC.InnerFinishPart]		:= GVL_General.XtsPartInnerFinish;
	astSectorConfig[Index].ComparePartObjectId[GC.OuterStartPart]			:= GVL_General.XtsPartOuterStart;
	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateSingularSectors" Id="{76549e4f-6820-0bd6-098e-f28201a1978c}">
      <Declaration><![CDATA[METHOD PRIVATE _M_UpdateSingularSectors
VAR
    SectorIndex : INT; // FOR loop
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Update Singular Sectors
FOR SectorIndex := GC.MIN_SECTOR_CT TO GC.MAX_SECTOR_CT DO
    IF afbSector[SectorIndex].P_SectorStatus.MoverEnteredSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector +1;
    ELSIF afbSector[SectorIndex].P_SectorStatus.MoverExitedSector.Q THEN
        afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector	:= afbSector[SectorIndex].P_SectorStatus.MoverCountOnSector -1;
    END_IF
END_FOR


SectorStatus[GC.MAG_TRIG_SECTOR_OPART_END] 	  		:= afbSector[GC.MAG_TRIG_SECTOR_OPART_END].P_SectorStatus;
SectorStatus[GC.MAG_ON_SECTOR_OPART] 		        := afbSector[GC.MAG_ON_SECTOR_OPART].P_SectorStatus;
SectorStatus[GC.SHORTCUT_ENTRY_SECTOR_IPART] 		:= afbSector[GC.SHORTCUT_ENTRY_SECTOR_IPART].P_SectorStatus;
SectorStatus[GC.SHORTCUT_ENTRY_HALF_IPART] 	        := afbSector[GC.SHORTCUT_ENTRY_HALF_IPART].P_SectorStatus;
SectorStatus[GC.SHORTCUT_CALC_SECTOR_IPART] 		:= afbSector[GC.SHORTCUT_CALC_SECTOR_IPART].P_SectorStatus;
SectorStatus[GC.LOAD_STOP_SECTOR_IPART] 	        := afbSector[GC.LOAD_STOP_SECTOR_IPART].P_SectorStatus;
SectorStatus[GC.SHORTCUT_COMPLETE] 	       			:= afbSector[GC.SHORTCUT_COMPLETE].P_SectorStatus;
SectorStatus[GC.SHORTCUT_EXIT_HALF_IPART] 	        := afbSector[GC.SHORTCUT_EXIT_HALF_IPART].P_SectorStatus;
SectorStatus[GC.SHORTCUT_MERGE_COMMAND] 	    := afbSector[GC.SHORTCUT_MERGE_COMMAND].P_SectorStatus;
SectorStatus[GC.INNER_MERGE_TO_FINISH] 	        	:= afbSector[GC.INNER_MERGE_TO_FINISH].P_SectorStatus;
SectorStatus[GC.OUTER_MERGE_UPSTREAM_PRE] 	        		:= afbSector[GC.OUTER_MERGE_UPSTREAM_PRE].P_SectorStatus;
SectorStatus[GC.OUTER_MERGE_UPSTREAM] 	        		:= afbSector[GC.OUTER_MERGE_UPSTREAM].P_SectorStatus;
SectorStatus[GC.OUTER_MERGE_DOWNSTREAM] 	       	 		:= afbSector[GC.OUTER_MERGE_DOWNSTREAM].P_SectorStatus;
SectorStatus[GC.OUTER_MERGE_COMBINED] 	        := afbSector[GC.OUTER_MERGE_COMBINED].P_SectorStatus;
SectorStatus[GC.OUTER_BIGTRACK_END] 	       	 		:= afbSector[GC.OUTER_BIGTRACK_END].P_SectorStatus;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_UpdateStatus" Id="{e2ce48be-cc9f-0750-003a-a1ba8f5b4db7}">
      <Declaration><![CDATA[METHOD PROTECTED _M_UpdateStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[_M_UpdateSingularSectors();

//_M_UpdateMultiSectors();]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_SectorConfig" Id="{d802c857-1158-07aa-3256-c03aa840c463}">
      <Declaration><![CDATA[PROPERTY P_SectorConfig : REFERENCE TO ARRAY[GC.MIN_SECTOR_CT..GC.MAX_SECTOR_CT] OF ST_SectorConfig]]></Declaration>
      <Get Name="Get" Id="{5a64eacf-dbbc-0e21-3403-be1e42236752}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_SectorConfig REF= astSectorConfig;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>