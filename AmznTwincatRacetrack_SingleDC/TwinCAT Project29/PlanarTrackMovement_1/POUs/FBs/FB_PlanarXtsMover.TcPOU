<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PlanarXtsMover" Id="{e98e5f10-cdde-43fc-96da-1ae5f511366a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PlanarXtsMover

VAR_INPUT
	iTcIoXtsXpuMover			: REFERENCE TO Tc3_XTS_Utility.I_TcIoXtsXpuMover;
END_VAR

VAR
	stMoverOptions						: ST_MoverOptions;
	BaseMoveOptions						: Tc3_Mc3PlanarMotion.ST_MoveOnTrackOptions;
	GearInMasterMoverOptions	: Tc3_Mc3PlanarMotion.ST_GearInPosOnTrackWithMasterMoverOptions;
	
	MC_PlanarFeedbackGearInPosOnTrackWithMasterMover : Tc3_Mc3PlanarMotion.MC_PlanarFeedbackGearInPosOnTrackWithMasterMover;
		
	nMoverId			    				: UDINT;

	_McPlanarMover						: Tc3_Mc3PlanarMotion.MC_PlanarMover;
	_McPlanarTrackTrail    		: Tc3_Mc3PlanarMotion.MC_PlanarTrackTrail;
                        		
	stXtsPositionInfo					: Tc3_XTS_Utility.ST_PositionInfo;
	                      		
	Physics										: Tc3_Physics.PositionXYC;
	Dynamics									: Tc3_Physics.DynamicConstraint_PathXY;

	Mover				        			: MoverSort;
	CmdDivert									: BOOL;
//	eMerge										: E_MergeType;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{497e6300-3e6d-49b8-a318-13b94b960f56}" />
    <Folder Name="Properties" Id="{bafe569f-b5f0-4de9-ae48-854cd11ccd2e}" />
    <Method Name="FB_init" Id="{4b084dbd-ec42-0e10-3862-f9a7de67a652}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stMoverOptions.BaseMoveOptions REF= BaseMoveOptions;
stMoverOptions.GearInMasterMoverOptions	REF= GearInMasterMoverOptions;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsCommandedInShortcut" Id="{e5e69e7e-f163-4728-82da-b10e582ce622}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY IsCommandedInShortcut : BOOL]]></Declaration>
      <Get Name="Get" Id="{7a71ba46-249d-415a-b1f4-f1c52c07bed0}">
        <Declaration><![CDATA[VAR
	nCounter: UDINT := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[_mcPlanarMover.GetTrackTrailInformation(_PlanarTrail);

IF _PlanarTrail.Error OR _PlanarTrail.Size < 1 THEN
   IsCommandedInShortcut := FALSE;
   RETURN;
END_IF
   
FOR nCounter := 0 TO _PlanarTrail.Size - 1 DO
	IF _PlanarTrail.GetTrackOidAt(nCounter) = GVL_Mc3.MC_Tracks[E_TrackNum.Small].MCTOPLC_STD.TrackOID  THEN
		IsCommandedInShortcut := TRUE;
		RETURN;
	END_IF
END_FOR

IsCommandedInShortcut := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="JoinTrack" Id="{fd819ce6-c064-4bae-aa84-926325f13c12}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD JoinTrack

VAR_INPUT
	feedback: REFERENCE TO MC_PlanarFeedback;
END_VAR

VAR_IN_OUT
	track: MC_PlanarTrack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_McPlanarMover.JoinTrack(feedback, track, 0, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EvaluateGap" Id="{fcb9e531-850f-006f-2c28-ec403292155f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD M_EvaluateGap
VAR_INPUT
	MoverIndex	: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TrackSectors[MoverIndex].SectorStatus[GC.OUTER_TIGHTGAP_ZONE].MoverIsOnSector OR
TrackSectors[MoverIndex].SectorStatus[GC.INNER_MERGE_TO_FINISH].MoverIsOnSector THEN
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap := stMoverConfig.TightMoverGap;
ELSIF TrackSectors[MoverIndex].SectorStatus[GC.OUTER_PRE_TG_ZONE].MoverIsOnSector THEN
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.TempGap := HelperFunctions.F_MapLReal(x := TrackSectors[MoverIndex].SectorStatus[GC.OUTER_PRE_TG_ZONE].PercentOfSectorTraversed,
														in_min := 0.0, in_max := 1.0, out_min := stMoverConfig.NormalMoverGap, out_max := stMoverConfig.TightMoverGap);
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap := fbPlanarXtsMover[MoverIndex].P_MoverOptions.TempGap;
ELSIF TrackSectors[MoverIndex].SectorStatus[GC.OUTER_POST_TG_ZONE].MoverIsOnSector THEN
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.TempGap := HelperFunctions.F_MapLReal(x := TrackSectors[MoverIndex].SectorStatus[GC.OUTER_POST_TG_ZONE].PercentOfSectorTraversed,
														in_min := 0.0, in_max := 1.0, out_min := stMoverConfig.TightMoverGap, out_max := stMoverConfig.NormalMoverGap);
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap := fbPlanarXtsMover[MoverIndex].P_MoverOptions.TempGap;
ELSE
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap := stMoverConfig.NormalMoverGap;
END_IF

IF fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap = stMoverConfig.NormalMoverGap OR
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.BaseMoveOptions.gap = stMoverConfig.TightMoverGap THEN
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.GapInTransition := FALSE;
ELSE
	fbPlanarXtsMover[MoverIndex].P_MoverOptions.GapInTransition := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_CmdDivert" Id="{8cede827-2b25-094d-2c84-715767aaf20f}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_CmdDivert : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{ee22a2e2-25c9-085f-3a80-3e499cb6195c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_CmdDivert	REF= CmdDivert;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Dynamics" Id="{012820e2-39fa-01ed-0dfe-860675d63f58}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_Dynamics : REFERENCE TO Tc3_Physics.DynamicConstraint_PathXY]]></Declaration>
      <Get Name="Get" Id="{985c286c-7fa7-0076-0f00-c12e68aed781}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Dynamics	REF= Dynamics;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_eMerge" Id="{5698d2c6-a9ba-0594-1fa9-f7ecaefdee80}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_eMerge : REFERENCE TO E_MergeType]]></Declaration>
      <Get Name="Get" Id="{b80825a0-b14e-0969-14a3-bf841bda528e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_eMerge	REF= eMerge;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_MC_PlanarMover" Id="{79d72b75-52b9-47c8-886e-5e60276bf5f1}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_MC_PlanarMover : REFERENCE TO Tc3_Mc3PlanarMotion.MC_PlanarMover]]></Declaration>
      <Get Name="Get" Id="{71cad725-c4c4-49c5-9410-cee17b681f5a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_MC_PlanarMover REF= _McPlanarMover;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_MoverId" Id="{033bc7d6-a908-0af3-1630-2fc499f56ad8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_MoverId : UDINT]]></Declaration>
      <Get Name="Get" Id="{c0e5d564-a073-06e0-3bca-52836c21275c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_MoverId	:= nMoverId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ff03ecba-f79d-0c21-3b65-7c6a4248584c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nMoverId := P_MoverId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_MoverOptions" Id="{fb098007-5ff7-07f5-0b7d-758e50c8b22a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_MoverOptions : REFERENCE TO ST_MoverOptions]]></Declaration>
      <Get Name="Get" Id="{9944f816-4bb0-07d5-02b6-9a4f523da06d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_MoverOptions REF= stMoverOptions;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_MoverSort" Id="{a5ac8d37-9108-0740-305c-d3b342270158}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_MoverSort : REFERENCE TO MoverSort]]></Declaration>
      <Get Name="Get" Id="{bae1975d-f945-0652-3748-976b73c4f7d6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_MoverSort	REF= Mover;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Physics" Id="{056b1259-392a-0821-097b-b08bee10a569}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_Physics : REFERENCE TO Tc3_Physics.PositionXYC]]></Declaration>
      <Get Name="Get" Id="{e7ba31e5-6730-0d69-35c1-51b7d57fd5fd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Physics	REF= Physics;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_PlanarFeedbackGearMM" Id="{d729f8fd-3179-0343-3353-ddd710f91bdd}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_PlanarFeedbackGearMM : REFERENCE TO Tc3_Mc3PlanarMotion.MC_PlanarFeedbackGearInPosOnTrackWithMasterMover]]></Declaration>
      <Get Name="Get" Id="{2b88ac50-2312-0cef-1014-00a094a686f4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_PlanarFeedbackGearMM REF= MC_PlanarFeedbackGearInPosOnTrackWithMasterMover;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_TrackConfig" Id="{e32b61fd-1607-0d8a-3b00-a92d697c1e42}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_TrackConfig : REFERENCE TO ST_TrackConfig]]></Declaration>
      <Get Name="Get" Id="{f2020383-ba74-08e6-01f4-c80f3d2580af}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_XtsPositionInfo" Id="{eee46ce5-009e-038a-12e5-cdbf8f2886af}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY P_XtsPositionInfo : REFERENCE TO Tc3_XTS_Utility.ST_PositionInfo]]></Declaration>
      <Get Name="Get" Id="{58ff9574-093b-05dd-3592-27328f83735e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_XtsPositionInfo	REF= stXtsPositionInfo;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Update" Id="{2a189ea7-97f2-4dc0-980a-fdde9c091766}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Update : PVOID]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iTcIoXtsXpuMover <> Tc3_Module.NULL THEN
  stXtsPositionInfo	:= iTcIoXtsXpuMover.GetPositionInfo();
END_IF

_mcPlanarMover.Update();

_mcPlanarMover.GetTrackTrailInformation(_McPlanarTrackTrail);

Mover.MoverNumber 	:= nMoverId;
Mover.MoverPos    	:= _McPlanarMover.MCTOPLC.SETONTRACK.SetPos;
Mover.TrackID     	:= _McPlanarMover.MCTOPLC.SETONTRACK.TrackOID;
//MoverPhysics		:= 

{warning <'Method Not Called'>}
//_M_UpdateStatus();

IF _McPlanarTrackTrail.Error OR _McPlanarTrackTrail.Size <= 1 THEN
   RETURN;
END_IF

IF iTcIoXtsXpuMover <> Tc3_Module.NULL THEN
  //SmallCircle
  IF _McPlanarTrackTrail.GetTrackOidAt(1) = MC_Tracks[E_TrackNum.Small].MCTOPLC_STD.TrackOID   THEN
    iTcIoXtsXpuMover.SetActiveTrackObjectId(XtsCompleteTrackInnerOID);
  //BigCircle
  ELSIF _McPlanarTrackTrail.GetTrackOidAt(1) =MC_Tracks[E_TrackNum.Big].MCTOPLC_STD.TrackOID THEN
    iTcIoXtsXpuMover.SetActiveTrackObjectId(XtsCompleteTrackOuterOID);
  END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>