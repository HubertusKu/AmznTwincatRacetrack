<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_XtsXlMoverUtility" Id="{ca311e0f-ebac-4a24-bb0f-17dadbea699e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_XtsXlMoverUtility
VAR_INPUT
	EdtDriverOid: OTCID;
END_VAR

VAR_OUTPUT
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bInit: BOOL;
	ipResultMessage: I_TcMessage := fbResult;
END_VAR

VAR
	fbResult: FB_TcMessage;
	_ipComObject: ITComObject;
	
	PID_TriggerLeave						: PTCID := 16#030802EF;
	PID_TriggerArrive						: PTCID := 16#030802EE;
	PID_IsVirtualFeedbackEnabled			: PTCID := 16#0308050B;
	PID_ConfiguredDetectionTrackObjectId	: PTCID := 16#030802F0;
	PID_StartupTrackPosition				: PTCID := 16#03080370;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	IF GetComObject(nObjectId:=EdtDriverOid) THEN
		bInit:=TRUE;
	END_IF
	RETURN;
END_IF]]></ST>
    </Implementation>
    <Method Name="GetComObject" Id="{c9c88a85-b788-4022-952b-ad04476a1ab5}">
      <Declaration><![CDATA[METHOD GetComObject : BOOL
VAR_INPUT
	nObjectId: OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FW_ObjMgr_GetObjectInstance(	oid		:= nObjectId, 
								iid		:= TC_GLOBAL_IID_LIST.IID_ITComObject, 
								pipUnk	:= ADR(_ipComObject)) = 0
THEN
	GetComObject := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetConfiguredDetectionTrackObjectId" Id="{d06cf094-c1a3-41cb-a4b5-f620fbfb81d0}">
      <Declaration><![CDATA[METHOD SetConfiguredDetectionTrackObjectId : BOOL
VAR_INPUT
	nConfiguredDetectionTrackObjectId: OTCID;
END_VAR

VAR
	nValue: OTCID;
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

nValue := nConfiguredDetectionTrackObjectId;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcSetObjPara(		pid := PID_ConfiguredDetectionTrackObjectId,
													nData := SIZEOF(nValue),
													pData := ADR(nValue),
													pgp := 0); 	
	IF hResult = 0 THEN
		SetConfiguredDetectionTrackObjectId := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetIsVirtualFeedbackEnabled" Id="{1879e674-8e62-4cb2-a416-b665cb01601b}">
      <Declaration><![CDATA[METHOD SetIsVirtualFeedbackEnabled : BOOL
VAR_INPUT
	bSetIsVirtualFeedbackEnabled: BOOL;
END_VAR

VAR
	nValue: BOOL;
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

nValue := bSetIsVirtualFeedbackEnabled;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcSetObjPara(		pid := PID_IsVirtualFeedbackEnabled,
													nData := SIZEOF(nValue),
													pData := ADR(nValue),
													pgp := 0); 	
	IF hResult = 0 THEN
		SetIsVirtualFeedbackEnabled := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetStartupTrackPosition" Id="{750682e7-a7b3-4fb9-83e4-9f88be9737e9}">
      <Declaration><![CDATA[METHOD SetStartupTrackPosition : BOOL
VAR_INPUT
	nStartupTrackPosition: REAL;
END_VAR

VAR
	nValue: REAL;
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

nValue := nStartupTrackPosition;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcSetObjPara(		pid := PID_StartupTrackPosition,
													nData := SIZEOF(nValue),
													pData := ADR(nValue),
													pgp := 0); 	
	IF hResult = 0 THEN
		SetStartupTrackPosition := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerArrive" Id="{d2a10e3a-9432-46a6-90f5-a92906040c89}">
      <Declaration><![CDATA[METHOD TriggerArrive : BOOL
VAR_INPUT
END_VAR

VAR
	nValue: BOOL;
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

nValue := TRUE;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcSetObjPara(		pid := PID_TriggerArrive,
													nData := SIZEOF(nValue),
													pData := ADR(nValue),
													pgp := 0); 	
	IF hResult = 0 THEN
		TriggerArrive := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerLeave" Id="{da054670-5c94-4f60-9d15-b3321e622520}">
      <Declaration><![CDATA[METHOD TriggerLeave : BOOL
VAR_INPUT
END_VAR

VAR
	nValue: BOOL;
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

nValue := TRUE;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcSetObjPara(		pid := PID_TriggerLeave,
													nData := SIZEOF(nValue),
													pData := ADR(nValue),
													pgp := 0); 	
	IF hResult = 0 THEN
		TriggerLeave := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_XtsXlMoverUtility">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.GetComObject">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.SetConfiguredDetectionTrackObjectId">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.SetIsVirtualFeedbackEnabled">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.SetStartupTrackPosition">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.TriggerArrive">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_XtsXlMoverUtility.TriggerLeave">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>