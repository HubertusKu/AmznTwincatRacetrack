<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="FB_TrackObject" Id="{29e2a0b7-3367-458c-a943-6af05a504777}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TrackObject
// for a track/part this block keeps a list of the movers in order with their positions on a track

VAR_INPUT
	TrackID: OTCID;
	iMover	:REFERENCE TO ARRAY[1..nMoverCount] OF I_Mover;
	trackLength : LREAL;// this should be a loookup but I don't know how to look it up so I'm going to pass it externally 
END_VAR

VAR_OUTPUT
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bInit: BOOL;
	ipResultMessage: I_TcMessage := fbResult;
	moverIDs : ARRAY[1..nMoverCount] OF UDINT;
END_VAR

VAR
	nNumMoversThisTrack: UDINT; //numberofMovers currently on this track
	nMoverList: ARRAY [1..nMoverCount] OF OTCID; //list of movers currently on the track 

	distToNextMover : ARRAY[1..nMoverCount] OF LREAL;  
END_VAR

VAR

	fbResult: FB_TcMessage;
	_ipComObject: ITComObject;
	PID_MOverList				: PTCID := 16#05030149;
	PID_NumMover				: PTCID := 16#050300C5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	IF GetComObject(nObjectId:=TrackID) THEN
		bInit:=TRUE;
	END_IF
	RETURN;
END_IF]]></ST>
    </Implementation>
    <Method Name="CyclicUpdate" Id="{6466b22b-9a20-4361-bd3e-15dc54a6f9f2}">
      <Declaration><![CDATA[METHOD CyclicUpdate : BOOL
VAR_INPUT
END_VAR

VAR
	J: UDINT;
	I: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInit THEN 
	GetNumMovers(); 
	GetMoverList(); 
END_IF 
MEMSET(ADR(moverIDs),0,SIZEOF(moverIDs)); // have to clear the list 
FOR J := 1 TO nNumMoversThisTrack DO  
	FOR I := 1 TO nNumMovers DO  
		IF iMover[I].MoverOTCID = nMoverList[J] THEN 
			moverIDs[J] := I; 
		END_IF
	END_FOR
END_FOR
FOR I := 1 TO nNumMoversThisTrack DO 
	IF I <= nNumMoversThisTrack -1 THEN
		distToNextMover[I] := fbMover[moverIDs[I+1]].distToEndOfTrack - fbMover[moverIDs[I]].distToEndOfTrack;
	ELSIF I = nNumMoversThisTrack THEN
		distToNextMover[I] := trackLength - fbMover[moverIDs[I]].distToEndOfTrack;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="findMergePosition" Id="{79edee76-eb47-46aa-a364-cc750422d478}">
      <Declaration><![CDATA[METHOD findMergePosition : BOOL
VAR_INPUT
	mergeSyncCommandPos : LREAL;
	spaceToMerge :LREAL; 
END_VAR
VAR_OUTPUT 
	nMoverToFollow: UDINT; 
	mergeWithoutFollow : BOOL; 
	mergeNotPossible : BOOL; 
END_VAR
VAR_INST 
	I: UDINT;
	moverInMerge: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mergeNotPossible := TRUE; 
mergeWithoutFollow:=FALSE;
nMoverToFollow := 0; 
moverInMerge := 0;
// do not get fancy,  go through the list find all the distances between
//cyclic update finds builds a list of moers on the track and their spaceing 

IF nNumMoversThisTrack = 0  THEN // if there's no movers on the track we can just merge 
	mergeWithoutFollow := TRUE;
	mergeNotPossible := FALSE; 
ELSE
	// find a mover to follow starting at sync position look for a space to merge sized hole 
	FOR I := 1 TO nNumMoversThisTrack DO 
		IF fbMover[moverIDs[I]].distToEndOfTrack > mergeSyncCommandPos THEN // this mover is a potentialmover to follow 
			IF distToNextMover[I] > spaceToMerge THEN // follow this mover 
				nMoverToFollow := moverIDs[I]; //yes follow this mover 
				mergeNotPossible := FALSE; // the merge is possible 
				EXIT ; //get out of the loop we want the first one 
			END_IF
		END_IF
	END_FOR 
END_IF
IF mergeNotPossible THEN 
	nMoverToFollow := 0; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetComObject" Id="{9c3d8252-37e5-43a6-92ac-b9262faf50ab}">
      <Declaration><![CDATA[METHOD GetComObject : BOOL
VAR_INPUT
	nObjectId: OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FW_ObjMgr_GetObjectInstance(	oid		:= nObjectId, 
								iid		:= TC_GLOBAL_IID_LIST.IID_ITComObject, 
								pipUnk	:= ADR(_ipComObject)) = 0
THEN
	GetComObject := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverList" Id="{c310a186-1e82-4690-be52-ef705452e8ab}">
      <Declaration><![CDATA[METHOD GetMoverList : BOOL
VAR
	nData 			: UDINT := SIZEOF(nMoverList);
	pData 			: PVOID := ADR(nMoverList);
	stEventEntry	: TcEventEntry;
	pstEventEntry	: REFERENCE TO TcEventEntry REF= stEventEntry;
END_VAR
VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

IF _ipComObject <> 0 THEN 
	 hResult := 	_ipComObject.TcgetObjPara(		pid := PID_MOverList,
													nData := nData,
													pData := pData,
													pgp := 0); 	
	IF hResult = 0 THEN
		GetMoverList := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNumMovers" Id="{40bcbca1-019b-4460-9526-3630c8cebd02}">
      <Declaration><![CDATA[METHOD GetNumMovers : BOOL
VAR
	stEventEntry: TcEventEntry;
	pstEventEntry: REFERENCE TO TcEventEntry := stEventEntry;
	nData 			: UDINT := SIZEOF(nNumMoversThisTrack);
	pData 			: PVOID := ADR(nNumMoversThisTrack);
END_VAR

VAR_INST
	hResult : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bError := FALSE;

IF _ipComObject <> 0 THEN 	
	nData := SIZEOF(nNumMoversThisTrack);
	pData  := ADR(nNumMoversThisTrack);

	 hResult := 	_ipComObject.TcGetObjPara(		pid := PID_NumMover,
													nData := nData,
													pData := pData,
													pgp := 0); 	
													
	IF hResult = 0 THEN
		GetNumMovers := TRUE;
	ELSE
		HRESULTAdsErr_TO_TcEventEntry(hResult,stEventEntry);
		IF NOT fbResult.EqualsToEventEntryEx( stOther := stEventEntry) THEN
			fbResult.CreateEx(stEventEntry, 0);
			fbResult.Send(0);
			fbResult.Release();
		END_IF
		bError := TRUE;
	END_IF							
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>