<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{66ade15a-bef8-4e71-a124-c2e5978c50eb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
		
	bAllDone		: BOOL;
	bStopSequence	: BOOL;
	
	nCase 		: INT;
	nMoveState		: ARRAY[1..nNumMaxMovers] OF INT;
	
	aDynamics	: ARRAY[1..nNumMaxMovers] OF DynamicConstraint_PathXY;
	aDynamicsFast	: ARRAY[1..nNumMaxMovers] OF DynamicConstraint_PathXY;
	aMoveOnTrackOptions : ARRAY[1..20] OF ST_MoveOnTrackOptions;
	
	fbXtsEnvironment: FB_TcIoXtsEnvironment;
	
	nForCounter: UDINT;
	M,N,T,Tr : UDINT;
	dynamics: INT;
	
	// Magnet
	MagnetValue AT%Q*: INT;
	bMagnetOn : BOOL;	
	stPositionInfo: ST_PositionInfo;
		
	pwm: FB_PWM;
	
	IsMoverCommandedInShortcut: BOOL;
	IsMoverInBlockingArea: BOOL;
	nActStopPos: UINT := 1;
	Fp_error : R_Trig;
	Velo : LREAL := 500;
	Switch : BOOL;
	WithoutSwitch : BOOL := TRUE;
	SwtichOnly: BOOL;
	
	MoverStop 	AT%I* :BOOL;
	MoverStopDone AT%Q*		: BOOL;
	Info 		AT%Q*: BOOL;
	Operating	AT%Q*: BOOL;
	Process		AT%Q*: BOOL;
	Fault		AT%Q*: BOOL;
	Emergency	AT%Q*: BOOL;
	
	Voltage1 AT%I*: UDINT;
	Voltage2 AT%I*: UDINT;
	
	
	TcRestart : TC_Restart;
	Restart : BOOL;
	busy : BOOL;
	fp_start : R_Trig;
	bStartSequence: BOOL;
	
	FP_Counter : r_trig;
	Switchcounter : DINT;
	SwitchCurrent: INT :=12000; 
	test : LREAL;
	Horntimer : tp; 
	R_trigHorn : R_trig;
	
	TestPowerMat : BOOL;
	StopPos : LREAL := 7611;
	StopTime : TIME := T#8S;
	StopTimer :ARRAY[1..nNumMaxMovers] OF ton;
	StartTimer :ARRAY[1..nNumMaxMovers] OF BOOL;
	
	
	MoverPos :ARRAY[1..nNumMaxMovers] OF PositionXYC;
	ArcLength :ARRAY[1..nNumMaxMovers] OF LREAL;
	TrackPos :ARRAY[1..nNumMaxMovers] OF ARRAY[1..nNumMaxTracks] OF PositionXYC;
	
	GetMoverOnTrack : ReadTcCom;
	aMoverTrack : ARRAY[1..nNumMaxMovers] OF otcid;
	FirstMoverTrackPos : LREAL;
	MoverGap : LREAL;
	FTrigTrackCount : F_Trig;
	MoverNo  : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbXtsEnvironment.Init(TRUE);

Emergency :=  MoverStop;

Operating := NOT  MoverStop;
R_trigHorn(clk := Voltage1> 10000 OR Voltage2 >10000);
Horntimer(in:= ( R_trigHorn.Q ) , PT:= T#2S,Q=> info);

IF nCASE > 90 THEN
	Process := TRUE;
ELSE 
	Process := FALSE;	
END_IF





IF NOT fbXtsEnvironment.P_IsInitialized THEN
	RETURN;
END_IF





IF GetMoverOnTrack.GetComObject(MC_Tracks[1].MCTOPLC_STD.TrackOID)THEN
	aMoverTrack:= GetMoverOnTrack.GetValue();
END_IF







IF NOT MoverStop AND NOT MoverStopDone THEN
	FOR nForCounter:=1 TO nNumMovers DO
		aDynamics[nForCounter].SetValuesVADJ(8000, 8000, 8000, 20000);
		nCase := 140;
		//fbPlanarMover[nForCounter].McPlanarMover.Halt(MoverFeedback[nForCounter], aDynamics[nForCounter]);
	END_FOR		
	MoverStopDone := TRUE;
ELSIF 	MoverStop THEN
	MoverStopDone := FALSE;
END_IF


	TcRestart(
	NETID:= '', 
	RESTART:= Restart, 
	TMOUT:=T#5S , 
	BUSY=>busy , 
	ERR=> , 
	ERRID=> );


fp_start(clk:=bStartSequence);
IF fp_start.Q THEN
	nCase := 10;
	bStartSequence := FALSE;
END_IF



IsMoverInBlockingArea := FALSE;
FOR M := 1 TO nNumMovers DO///Movers
	StopTimer[M](in:=StartTimer[m],PT:=StopTime);
	fbPlanarMover[m].nMoverId := nForCounter;
	fbPlanarMover[m].iTcIoXtsXpuMover := fbXtsEnvironment.XpuTcIo(1).MoverTcIo(TO_UINT(m));
	fbPlanarMover[m].Update();
	
	GVL_mc3.Mover[M].MoverPos  :=fbPlanarMover[M].McPlanarMover.MCTOPLC.SETONTRACK.SetPos;
	GVL_mc3.Mover[M].TrackID:= fbPlanarMover[M].McPlanarMover.MCTOPLC.SETONTRACK.TrackOID;
	GVL_mc3.Mover[M].MoverNumber := M;
	
	MoverPos[M].SetValuesXYC(fbPlanarMover[M].McPlanarMover.MCTOPLC.SET.SetPos.x ,fbPlanarMover[M].McPlanarMover.MCTOPLC.SET.SetPos.y,fbPlanarMover[M].McPlanarMover.MCTOPLC.SET.SetPos.c);
	
	TR := Tr+1;
	IF Tr = 4 THEN
		Tr :=1;
	END_IF
	ArcLength[M] :=GVL_Mc3.MC_Tracks[Tr].GetArcLengthClosestTo(MoverPos[M]);
	GVL_Mc3.MC_Tracks[Tr].GetPositionAt(ArcLength[M],TrackPos[M][Tr]);
	
	IF ABS(MoverPos[m].x - TrackPos[M][Tr].x) < 1 AND  ABS(MoverPos[m].y - TrackPos[M][Tr].y) < 1 THEN
 		GVL_mc3.Mover[M].MoverTrackNr := Tr;
	END_IF	
	
	

	IsMoverInBlockingArea := IsMoverInBlockingArea OR (Mover[M].TrackID = GVL_Mc3.MC_Tracks[E_TrackNum.main].MCTOPLC_STD.TrackOID AND IsBetween(Mover[M].MoverPos, fMagnetEntry - 100, fMagnetExit + 100));
	MoverFeedback[M].Update();
//	Fp_error(clk := fbPlanarMover[M].McPlanarMover.Error);
	IF Fp_error.Q THEN
		nCase := 140;
		Fault := TRUE;
		bMagnetOn := FALSE;
	ELSE
		Fault := FALSE;
	END_IF
	
	IF aMoverTrack[1] <> 0 AND_THEN fbPlanarMover[m].McPlanarMover.MCTOPLC.STD.MoverOID = aMoverTrack[1] THEN
		FirstMoverTrackPos := fbPlanarMover[m].McPlanarMover.MCTOPLC.SETONTRACK.SetPos;
	END_IF
	
	

	
	
END_FOR

FOR T := 1 TO nNumMaxTracks DO 
	MC_Tracks[T].Update();
	MC_Trackfeedback[T].Update();
	
END_FOR
 MoverGap := (GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()- FirstMoverTrackPos);
(*
FTrigTrackCount(CLK:=GVL_Mc3.MC_Tracks[E_TrackNum.Small].MCTOPLC_STD.MoverCountOnTrack =0);
IF FTrigTrackCount.Q    THEN
	IsMoverCommandedInShortcut := FALSE;
END_IF	
*)

CASE nCase OF
	10:
		FOR nForCounter := 1 TO fbXtsEnvironment.XpuTcIo(1).GetPartCount() DO
			fbXtsEnvironment.XpuTcIo(1).PartTcIo(TO_UINT(nForCounter)).TriggerReset();
		END_FOR
		Fault := FALSE;
		nCase := 20;

	20:
		FOR T := 1 TO nNumMaxTracks DO 
			MC_Tracks[T].Enable(MC_Trackfeedback[T]);
		END_FOR
				nCase := 30;
		
		
	30: 
		IF MC_Trackfeedback[1].Done AND MC_Trackfeedback[2].Done AND MC_Trackfeedback[3].Done THEN
			nCase := 35;
		END_IF
		
		
	35:
		FOR nForCounter:=1 TO nNumMovers DO
			fbPlanarMover[nForCounter].McPlanarMover.Reset(MoverFeedback[nForCounter]);
		END_FOR
		nCase := 36;	
		
		
	36:	
		bAllDone:=TRUE;
		FOR nForCounter:=1 TO nNumMovers DO
			bAllDone:=bAllDone AND MoverFeedback[nForCounter].Done;
		END_FOR
		
		IF bAllDone THEN
			nCase := 40;
		END_IF
		
		
	40:
		FOR nForCounter:=1 TO nNumMovers DO
			fbPlanarMover[nForCounter].McPlanarMover.Enable(MoverFeedback[nForCounter]);
		END_FOR
		nCase := 50;
	
		
	50:
		bAllDone:=TRUE;
		FOR nForCounter:=1 TO nNumMovers DO
			bAllDone:=bAllDone AND MoverFeedback[nForCounter].Done;
		END_FOR
		
		IF bAllDone THEN
			nCase := 60;
		END_IF

	//55:

	60:
		FOR nForCounter:=nNumMovers TO 1  BY -1 DO
			fbPlanarMover[nForCounter].JoinTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[3]);//  Mover[nForCounter].MoverTrackNr]);//
		END_FOR
		
		nCase := 70;
		
		
	70:
		bAllDone:=TRUE;
		FOR nForCounter:=1 TO nNumMovers DO
			bAllDone:=bAllDone AND MoverFeedback[nForCounter].Done;
		END_FOR
		
		IF bAllDone THEN
			nCase := 80;
		END_IF
		
	80:	
		FOR nForCounter:=1 TO nNumMovers DO
			nMoveState[nForCounter] := 0;
			aMoveOnTrackOptions[nForCounter].direction := MC_Direction.mcDirectionPositive;
			aMoveOnTrackOptions[nForCounter].gapMode := MC_GAP_MODE_ON_TRACK.Fast1D;
		END_FOR
		
		nCase := 90;

	100:
		
		FOR nForCounter:=1 TO nNumMovers DO
			aDynamicsFast[nForCounter].SetValuesVADJ(Velo, 16000, 16000, 29000);
			aDynamics[nForCounter].SetValuesVADJ(Velo, 10000, 1500, 29000);
			aMoveOnTrackOptions[nForCounter].gap:= 800;//900;	 
		END_FOR
	aDynamics[1].SetValuesVADJ(Velo-test,  30000, 1000, 10000);
		FOR nForCounter:=1 TO nNumMovers DO
	
			
			IF MoverNo <> 0 AND_THEN 	fbPlanarMover[MoverNo].McPlanarMover.MCTOPLC.SETONTRACK.TrackOID =	 GVL_Mc3.MC_Tracks[E_TrackNum.Big].MCTOPLC_STD.TrackOID THEN
				IsMoverCommandedInShortcut := FALSE;
			//	MoverNo := 0;
			END_IF
				
			CASE nMoveState[nForCounter] OF
				
				0: // Track 3 Main Cycel 
					fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.Main],  GVL_Mc3.MC_Tracks[E_TrackNum.Main].GetLength()-500, aDynamics[nForCounter], aMoveOnTrackOptions[nForCounter]);
					nMoveState[nForCounter] := 10;
					
				10:
					IF Mover[nForCounter].MoverPos > GVL_Mc3.MC_Tracks[E_TrackNum.Main].GetLength()-6000  AND  Mover[nForCounter].TrackID =   GVL_Mc3.MC_Tracks[E_TrackNum.Main].MCTOPLC_STD.TrackOID    THEN//     MCTrackOid_MainSemicircle THEN
						IF  (SwtichOnly OR NOT IsMoverCommandedInShortcut )AND NOT WithoutSwitch  AND  nForCounter > 10 THEN
							nMoveState[nForCounter] := 40; // 20 - BigCycel
							//IF fbPlanarMover[nForCounter].IsCommandedInShortcut THEN
								IsMoverCommandedInShortcut := TRUE;
								MoverNo :=nForCounter; /// fbPlanarMover[nForCounter].McPlanarMover.MCTOPLC.STD.MoverOID;
							//END_IF
						ELSE
							nMoveState[nForCounter] := 20;  // 40- SmallCycel					
						END_IF
					END_IF

				
				20:
					fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.Big], GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()-2000, aDynamics[nForCounter],aMoveOnTrackOptions[nForCounter]);
					nMoveState[nForCounter] := 30;
				
					
				30:
					IF Mover[nForCounter].MoverPos > GVL_Mc3.MC_Tracks[E_TrackNum.Big].GetLength()-4000 AND  Mover[nForCounter].TrackID = GVL_Mc3.MC_Tracks[E_TrackNum.big].MCTOPLC_STD.TrackOID    THEN//      MCTrackOid_BigSemicircle THEN
						nMoveState[nForCounter] := 0;
					END_IF				
				
			
				40:
					fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.Small], (GVL_Mc3.MC_Tracks[E_TrackNum.Small].GetLength()-3000), aDynamics[nForCounter], aMoveOnTrackOptions[nForCounter]);
					nMoveState[nForCounter] := 50;	

			

			
				50:
					IF Mover[nForCounter].MoverPos > GVL_Mc3.MC_Tracks[E_TrackNum.small].GetLength()-3500 AND  Mover[nForCounter].TrackID = GVL_Mc3.MC_Tracks[E_TrackNum.Small].MCTOPLC_STD.TrackOID    THEN// MCTrackOid_Shortcut THEN
						nMoveState[nForCounter] := 60;
					END_IF
				60:
					 // Track 3 Main Cycel
					IF FirstMoverTrackPos > 800 THEN 
						fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.Main],  GVL_Mc3.MC_Tracks[E_TrackNum.Main].GetLength()-500, aDynamicsFast[nForCounter], aMoveOnTrackOptions[nForCounter]);
						nMoveState[nForCounter] := 10;
					END_IF
				END_CASE
		
		END_FOR

		IF bStopSequence AND NOT(IsMoverInBlockingArea) THEN
			nCase := 110;
			bStopSequence := FALSE;
		END_IF
		110:
			N:= nNumMovers;
			FOR nForCounter:=1 TO nNumMovers DO		
				GVL_General.aStopPositions[nForCounter] := TO_LREAL(  fbXtsEnvironment.XpuTcIo(1).MoverTcIo(TO_UINT(N)).GetSimulatedStartUpPosition());
				N := N -1;
			END_FOR
			nCase := 120;
		
		120:	
			nActStopPos := UDINT_TO_UINT(nNumMaxMovers-nNumMovers+1);
			FOR nForCounter:=1 TO nNumMovers DO
				aDynamics[nForCounter].SetValuesVADJ(1000, 4000, 4000, 10000);
				nMoveState[nForCounter] := 0;
				fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.main], 300, aDynamics[nForCounter],aMoveOnTrackOptions[nForCounter]);
			END_FOR

			nCase:= 130; 
		130:
			FOR nForCounter:=1 TO nNumMaxMovers - (nNumMaxMovers -nNumMovers)  DO
				CASE nMoveState[nForCounter] OF
					0:								
						
						IF Mover[nForCounter].MoverPos < 300 AND  Mover[nForCounter].TrackID = GVL_Mc3.MC_Tracks[E_TrackNum.main].MCTOPLC_STD.TrackOID THEN
							aMoveOnTrackOptions[nForCounter].gap:= 700;
							fbPlanarMover[nForCounter].McPlanarMover.MoveOnTrack(MoverFeedback[nForCounter], GVL_Mc3.MC_Tracks[E_TrackNum.main], aStopPositions[nActStopPos], aDynamics[nForCounter], aMoveOnTrackOptions[nForCounter]);
							nActStopPos := nActStopPos + 1;
							nMoveState[nForCounter] := 10;
						END_IF
				END_CASE
			END_FOR
		
			bAllDone := TRUE;
			FOR nForCounter:=1 TO nNumMovers DO
				IF NOT(MoverFeedback[nForCounter].Done OR MoverFeedback[nForCounter].Error) THEN
					bAllDone := FALSE;
					EXIT;
				END_IF
			END_FOR
			
			IF bAllDone THEN
				nCase := 150;
			END_IF
		
		140:
			FOR nForCounter:=1 TO nNumMovers DO
				fbPlanarMover[nForCounter].McPlanarMover.Halt(MoverFeedback[nForCounter], aDynamics[nForCounter]);
			END_FOR	
			
			nCase := 145;
			
		145:
			bAllDone := TRUE;
			FOR nForCounter:=1 TO nNumMovers DO
				IF NOT(MoverFeedback[nForCounter].Done OR MoverFeedback[nForCounter].Error) THEN
					bAllDone := FALSE;
					EXIT;
				END_IF
			END_FOR
			
			IF bAllDone THEN
				nCase := 150;
			END_IF
		
		//Disable
		150:
			MoverStopDone := TRUE;
			FOR nForCounter:=1 TO nNumMovers DO
				fbPlanarMover[nForCounter].McPlanarMover.Disable(MoverFeedback[nForCounter]);
			END_FOR
				
			nCase := 0;
END_CASE

bMagnetOn := FALSE;
FOR nForCounter:=1 TO nNumMovers DO
	stPositionInfo := fbXtsEnvironment.XpuTcIo(1).MoverTcIo(TO_UINT(nForCounter)).GetPositionInfo();
	IF stPositionInfo.nTrackObjectId = XtsShortcutOid AND (IsBetween(stPositionInfo.fTrackPosition, fMagnetEntry - (Velo*0.08), fMagnetExit)) THEN
		bMagnetOn := TRUE;
	END_IF
END_FOR

pwm();
	
IF bMagnetOn AND NOT Fault THEN
	MagnetValue := SwitchCurrent*1310;
ELSE
 	MagnetValue := 0;
END_IF

FP_Counter(clk:=bMagnetOn);

IF FP_Counter.Q THEN
	Switchcounter := Switchcounter+1;

END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="501" Count="0" />
      <LineId Id="2728" Count="0" />
      <LineId Id="2724" Count="0" />
      <LineId Id="2729" Count="0" />
      <LineId Id="1997" Count="0" />
      <LineId Id="2907" Count="0" />
      <LineId Id="2906" Count="0" />
      <LineId Id="2733" Count="2" />
      <LineId Id="2737" Count="1" />
      <LineId Id="2736" Count="0" />
      <LineId Id="3467" Count="2" />
      <LineId Id="3466" Count="0" />
      <LineId Id="2731" Count="0" />
      <LineId Id="503" Count="2" />
      <LineId Id="3470" Count="2" />
      <LineId Id="3477" Count="5" />
      <LineId Id="3485" Count="0" />
      <LineId Id="3473" Count="3" />
      <LineId Id="2610" Count="0" />
      <LineId Id="2805" Count="2" />
      <LineId Id="3389" Count="0" />
      <LineId Id="2808" Count="5" />
      <LineId Id="3331" Count="0" />
      <LineId Id="3323" Count="0" />
      <LineId Id="2635" Count="12" />
      <LineId Id="2609" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="1724" Count="0" />
      <LineId Id="2523" Count="0" />
      <LineId Id="1675" Count="0" />
      <LineId Id="1727" Count="0" />
      <LineId Id="3372" Count="3" />
      <LineId Id="3368" Count="0" />
      <LineId Id="1829" Count="0" />
      <LineId Id="1835" Count="0" />
      <LineId Id="1926" Count="0" />
      <LineId Id="3355" Count="1" />
      <LineId Id="3362" Count="1" />
      <LineId Id="3377" Count="2" />
      <LineId Id="3386" Count="0" />
      <LineId Id="3364" Count="0" />
      <LineId Id="3380" Count="1" />
      <LineId Id="3385" Count="0" />
      <LineId Id="3382" Count="0" />
      <LineId Id="3384" Count="0" />
      <LineId Id="3383" Count="0" />
      <LineId Id="2519" Count="1" />
      <LineId Id="2525" Count="0" />
      <LineId Id="2509" Count="2" />
      <LineId Id="2730" Count="0" />
      <LineId Id="2908" Count="0" />
      <LineId Id="2739" Count="1" />
      <LineId Id="2512" Count="0" />
      <LineId Id="3486" Count="0" />
      <LineId Id="3488" Count="1" />
      <LineId Id="3487" Count="0" />
      <LineId Id="4127" Count="1" />
      <LineId Id="4119" Count="2" />
      <LineId Id="1919" Count="0" />
      <LineId Id="3342" Count="0" />
      <LineId Id="3344" Count="2" />
      <LineId Id="3353" Count="1" />
      <LineId Id="3616" Count="0" />
      <LineId Id="3618" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="3629" Count="1" />
      <LineId Id="3627" Count="1" />
      <LineId Id="3625" Count="0" />
      <LineId Id="3863" Count="87" />
      <LineId Id="4235" Count="0" />
      <LineId Id="3951" Count="3" />
      <LineId Id="4208" Count="0" />
      <LineId Id="4224" Count="0" />
      <LineId Id="4221" Count="1" />
      <LineId Id="4231" Count="0" />
      <LineId Id="4230" Count="0" />
      <LineId Id="4217" Count="1" />
      <LineId Id="3956" Count="9" />
      <LineId Id="4228" Count="1" />
      <LineId Id="4227" Count="0" />
      <LineId Id="4226" Count="0" />
      <LineId Id="3971" Count="1" />
      <LineId Id="3975" Count="18" />
      <LineId Id="3998" Count="6" />
      <LineId Id="4014" Count="0" />
      <LineId Id="4233" Count="0" />
      <LineId Id="4236" Count="0" />
      <LineId Id="4234" Count="0" />
      <LineId Id="4232" Count="0" />
      <LineId Id="4027" Count="79" />
      <LineId Id="1236" Count="0" />
      <LineId Id="971" Count="0" />
      <LineId Id="950" Count="1" />
      <LineId Id="982" Count="0" />
      <LineId Id="963" Count="2" />
      <LineId Id="962" Count="0" />
      <LineId Id="2237" Count="0" />
      <LineId Id="973" Count="0" />
      <LineId Id="2238" Count="0" />
      <LineId Id="972" Count="0" />
      <LineId Id="978" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="976" Count="0" />
      <LineId Id="975" Count="0" />
      <LineId Id="2167" Count="0" />
      <LineId Id="2166" Count="0" />
      <LineId Id="2656" Count="0" />
      <LineId Id="2655" Count="0" />
      <LineId Id="2657" Count="0" />
      <LineId Id="2659" Count="0" />
      <LineId Id="2658" Count="0" />
      <LineId Id="1513" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>